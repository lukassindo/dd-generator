[{"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\index.js":"1","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\App.js":"2","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\reportWebVitals.js":"3","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Species.js":"4","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Classes.js":"5","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Features.js":"6","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\services\\roll.js":"7","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\AbilityCells.js":"8","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Bonus.js":"9","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\contexts\\DataContext.js":"10","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\contexts\\DataProvider.js":"11","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\MultiForm.js":"12","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\FinalValues.js":"13","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\SpeciesChar.js":"14","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\LanguagesPick.js":"15","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\TrickPick.js":"16","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\ToolsPick.js":"17","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Dragons.js":"18","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Skills.js":"19","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\data\\data.js":"20","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\ClassChar.js":"21","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\services\\modificator.js":"22","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\HalfElf.js":"23","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\SkillsClass.js":"24","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Equip.js":"25","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Instruments.js":"26","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\ClassTricks.js":"27","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\SpellsPick.js":"28","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Domain.js":"29","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\ProficiencyPick.js":"30","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\AddLang.js":"31","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Ranger.js":"32","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Fighter.js":"33","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Past.js":"34","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Sheet.js":"35","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\services\\skillsMods.js":"36"},{"size":585,"mtime":1624612698180,"results":"37","hashOfConfig":"38"},{"size":404,"mtime":1615204498152,"results":"39","hashOfConfig":"38"},{"size":375,"mtime":1612444065613,"results":"40","hashOfConfig":"38"},{"size":6487,"mtime":1624963375232,"results":"41","hashOfConfig":"38"},{"size":1911,"mtime":1615363573822,"results":"42","hashOfConfig":"38"},{"size":5629,"mtime":1616059009965,"results":"43","hashOfConfig":"38"},{"size":609,"mtime":1612898380990,"results":"44","hashOfConfig":"38"},{"size":3358,"mtime":1615204415175,"results":"45","hashOfConfig":"38"},{"size":953,"mtime":1616058057339,"results":"46","hashOfConfig":"38"},{"size":107,"mtime":1613508308013,"results":"47","hashOfConfig":"38"},{"size":4502,"mtime":1620147167460,"results":"48","hashOfConfig":"38"},{"size":5403,"mtime":1624615523084,"results":"49","hashOfConfig":"38"},{"size":1451,"mtime":1614517545584,"results":"50","hashOfConfig":"38"},{"size":6456,"mtime":1618484162683,"results":"51","hashOfConfig":"38"},{"size":1528,"mtime":1617710824036,"results":"52","hashOfConfig":"38"},{"size":1548,"mtime":1617353215729,"results":"53","hashOfConfig":"38"},{"size":1921,"mtime":1620195115632,"results":"54","hashOfConfig":"38"},{"size":1584,"mtime":1617178063140,"results":"55","hashOfConfig":"38"},{"size":1328,"mtime":1617201069754,"results":"56","hashOfConfig":"38"},{"size":26945,"mtime":1624446877574,"results":"57","hashOfConfig":"38"},{"size":11768,"mtime":1624022421381,"results":"58","hashOfConfig":"38"},{"size":340,"mtime":1623243403387,"results":"59","hashOfConfig":"38"},{"size":1163,"mtime":1617196031398,"results":"60","hashOfConfig":"38"},{"size":1351,"mtime":1617729524223,"results":"61","hashOfConfig":"38"},{"size":2354,"mtime":1618495492809,"results":"62","hashOfConfig":"38"},{"size":2048,"mtime":1620146859242,"results":"63","hashOfConfig":"38"},{"size":2247,"mtime":1617733533243,"results":"64","hashOfConfig":"38"},{"size":2002,"mtime":1617729634214,"results":"65","hashOfConfig":"38"},{"size":3671,"mtime":1620144545441,"results":"66","hashOfConfig":"38"},{"size":1890,"mtime":1617788488244,"results":"67","hashOfConfig":"38"},{"size":1941,"mtime":1620198163277,"results":"68","hashOfConfig":"38"},{"size":2272,"mtime":1618321863541,"results":"69","hashOfConfig":"38"},{"size":1443,"mtime":1618494639637,"results":"70","hashOfConfig":"38"},{"size":6166,"mtime":1624442594587,"results":"71","hashOfConfig":"38"},{"size":24664,"mtime":1624617215665,"results":"72","hashOfConfig":"38"},{"size":1162,"mtime":1623414685844,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1vczvzi",{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"76"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"76"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"76"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"76"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"76"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"76"},"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\index.js",[],["171","172"],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\App.js",["173"],"import React from 'react';\r\n\r\nimport './App.css';\r\nimport 'fontsource-roboto';\r\nimport DataProvider from './contexts/DataProvider';\r\nimport MultiForm from './MultiForm';\r\n\r\n\r\nclass App extends React.Component  {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n\r\n  render () {\r\n\r\n    return (\r\n      <DataProvider>\r\n        <MultiForm/>\r\n      </DataProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\reportWebVitals.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Species.js",["174","175","176","177"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport human from './img/human.png';\r\nimport highelf from './img/elf.png';\r\nimport forestelf from './img/forest-elf.png';\r\nimport darkelf from './img/dark-elf.png';\r\nimport mountaindwarf from './img/mountain-dwarf.png';\r\nimport dwarf from './img/dwarf.png';\r\nimport lightfoot from './img/halfling.png';\r\nimport stout from './img/halfling-stout.png';\r\nimport tiefling from './img/tiefling.png';\r\nimport dragonborn from './img/dragonborn.png';\r\nimport forestgnome from './img/gnome.png';\r\nimport rockgnome from './img/rock-gnome.png';\r\nimport halforc from './img/half-orc.png';\r\nimport halfelf from './img/half-elf.png';\r\n\r\n\r\nclass Species extends React.Component {\r\n    SPECIES = ['Human', 'High Elf', 'Forest Elf', 'Drow - Dark Elf', 'Mountain Dwarf', 'Hill Dwarf','Halfling - Lightfoot', 'Halfling - Stout','Tiefling','Dragonborn', 'Forest Gnome', 'Rock Gnome', 'Half-Orc','Half-Elf'];\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            picked: '',\r\n        }\r\n\r\n        this.handleData = this.handleData.bind(this);\r\n    }\r\n    \r\n\r\n    handleData(e, species) {\r\n        // let classes = 'species_box';\r\n        let els = document.getElementsByClassName('species_box active');\r\n        if(els){\r\n            while (els[0]) {\r\n                els[0].classList.remove('active')\r\n            }\r\n        }\r\n     \r\n        // // e.target.className = classes.replace('species_box','species_box active');\r\n        let el = e.target.parentNode;\r\n        el.classList.add('active');\r\n        console.log(el);\r\n        this.props.handleData('species',species)\r\n        this.setState({picked: species});\r\n        this.props.buttonState('clicked');\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.props.currentStep !== 1) { // Prop: The current step\r\n            return (<></>)\r\n        }\r\n\r\n        return (\r\n            \r\n            <>\r\n             {/* <FormControl className=\"classic\">\r\n                 <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick Your Species</InputLabel>\r\n                <Select \r\n                    onChange={this.handleData}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value= {this.state.picked}\r\n                    placeholer=\"human\"\r\n                    style={{color: \"#fff\"}}\r\n                >\r\n                      \r\n                    {this.SPECIES.map((species,index) => (\r\n                        <MenuItem  key={index} value={species}>{species}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl> */}\r\n\r\n            <h2>Pick Your Species</h2>            \r\n            <div className=\"species_boxes\">\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Human')}>\r\n                    <p>Human</p>\r\n                    <img src={human} className=\"species_img\" alt=\"human\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'High Elf')}>\r\n                    <p>High Elf</p>\r\n                    <img src={highelf} className=\"species_img\" alt=\"high elf\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Forest Elf')}>\r\n                    <p>Forest Elf</p>\r\n                    <img src={forestelf} className=\"species_img\" alt=\"forest elf\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Drow - Dark Elf')}>\r\n                    <p>Drow - Dark Elf</p>\r\n                    <img src={darkelf} className=\"species_img\" alt=\"dark elf\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Mountain Dwarf')}>\r\n                    <p>Mountain Dwarf</p>\r\n                    <img src={mountaindwarf} className=\"species_img\" alt=\"mountain dwarf\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Hill Dwarf')}>\r\n                    <p>Hill Dwarf</p>\r\n                    <img src={dwarf} className=\"species_img\" alt=\"hill dwarf\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Halfling - Lightfoot')}>\r\n                    <p>Halfling - Lightfoot</p>\r\n                    <img src={lightfoot} className=\"species_img\" alt=\"halfling lightfoot\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Halfling - Stout')}>\r\n                    <p>Halfling - Stout</p>\r\n                    <img src={stout} className=\"species_img\" alt=\"halfling stout\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Tiefling')}>\r\n                    <p>Tiefling</p>\r\n                    <img src={tiefling} className=\"species_img\" alt=\"tiefling\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Dragonborn')}>\r\n                    <p>Dragonborn</p>\r\n                    <img src={dragonborn} className=\"species_img\" alt=\"dragonborn\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Forest Gnome')}>\r\n                    <p>Forest Gnome</p>\r\n                    <img src={forestgnome} className=\"species_img\" alt=\"forest gnome\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Rock Gnome')}>\r\n                    <p>Rock Gnome</p>\r\n                    <img src={rockgnome} className=\"species_img\" alt=\"rock gnome\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Half-Orc')}>\r\n                    <p>Half Orc</p>\r\n                    <img src={halforc} className=\"species_img\" alt=\"half orc\" />\r\n                </div>\r\n                <div class=\"species_box\" onClick={(e) => this.handleData(e, 'Half-Elf')}>\r\n                    <p>Half Elf</p>\r\n                    <img src={halfelf} className=\"species_img\" alt=\"half elf\" />\r\n                </div>\r\n            </div>\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Species;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Classes.js",["178","179","180"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n\r\nclass Classes extends React.Component {\r\n    CLASSES = ['Barbarian','Bard','Cleric','Druid','Fighter','Monk','Paladin','Ranger','Rogue','Sorcerer','Warlock','Wizard'];\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            picked: '',\r\n        }\r\n\r\n        this.handleData = this.handleData.bind(this);\r\n    }\r\n    \r\n\r\n    handleData(event) {\r\n        this.props.handleData('profession',event.target.value)\r\n        this.setState({picked: event.target.value});\r\n        this.props.buttonState('clicked');\r\n    }\r\n\r\n\r\n    render() {\r\n        if (this.props.currentStep !== 2) { \r\n            return (<></>)\r\n        }\r\n\r\n        return (\r\n            \r\n            <>\r\n             <FormControl className=\"classic\">\r\n                 <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick Your Class </InputLabel>\r\n                <Select \r\n                    onChange={this.handleData}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value= {this.state.picked}\r\n                    style={{color: \"#fff\"}}\r\n                >\r\n                      \r\n                    {this.CLASSES.map((prof,index) => (\r\n                        <MenuItem  key={index} value={prof}>{prof}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Classes;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Features.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\services\\roll.js",["181"],"const roll = () => {\r\n    let featuresNumbers = []\r\n    let rolls = 0 \r\n    while(rolls < 6)  {\r\n\r\n        let results = [];\r\n        let i = 0\r\n        while(i < 4) {\r\n            let k6 = Math.floor(Math.random() *6) + 1;\r\n            results.push(k6);\r\n            i++;\r\n        }\r\n        \r\n        results\r\n            .sort((a, b) => a - b)\r\n            .shift()\r\n\r\n        const sum = results.reduce((total, num) => {\r\n            return total + num;\r\n        })\r\n\r\n        featuresNumbers.push(sum);\r\n        rolls++;\r\n       \r\n    }\r\n\r\n    return featuresNumbers;\r\n}\r\n\r\nexport default {\r\n    roll,\r\n}","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\AbilityCells.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Bonus.js",["182"],"import React from 'react';\r\nimport DataContext from './contexts/DataContext';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport {data} from './data/data.js';\r\n\r\n\r\nclass Bonus extends React.Component {\r\n\r\nconstructor(props, context) {\r\n    super(props);\r\n    \r\n  \r\n    const species = this.props.species;\r\n    let bonus = [...data.speciesBonus[species]];\r\n    let values = bonus.map(item =>{\r\n        if(item !== '') item = `Bonus + ${item}`\r\n        return item;\r\n    })\r\n    this.state = {\r\n       values,\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nrender() {\r\n\r\n    return (\r\n        <>\r\n        {this.state.values.map((bon, index) =>  (\r\n            <TableCell style={{color: \"#fff\", textAlign: \"center\", padding: \"4px 35px\"}} key={index}>{bon}</TableCell>\r\n          ))}\r\n        </>\r\n\r\n    )\r\n    \r\n      \r\n        \r\n        \r\n    \r\n}\r\n\r\n\r\n\r\n}\r\n\r\nBonus.contextType=DataContext;\r\nexport default Bonus;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\contexts\\DataContext.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\contexts\\DataProvider.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\MultiForm.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\FinalValues.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\SpeciesChar.js",["183","184","185","186"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport DataContext from './contexts/DataContext';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport LanguagesPick from './LanguagesPick';\r\nimport TrickPick from './TrickPick';\r\nimport ToolsPick from './ToolsPick';\r\nimport Dragons from './Dragons';\r\nimport {HalfelfSkills} from './Skills';\r\nimport {data} from './data/data.js';\r\n\r\nclass SpeciesChar extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props);\r\n   \r\n        this.state = {\r\n            name: '',\r\n            gender: '',\r\n            alignment: '',\r\n            languages: [],\r\n            tricks: [],\r\n            tools:[],\r\n            dragons: [],\r\n            skills: [],\r\n        }\r\n\r\n        this.handleData = this.handleData.bind(this);\r\n        this.getValue = this.getValue.bind(this);\r\n        \r\n    }\r\n    \r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        let char = this.state;\r\n        // if(prevState.name !== char.name && prevState.gender !== char.gender && prevState.alignment !== char.alignment && prevProps.button === true) this.handleData();\r\n        if(prevState.name !== char.name) {\r\n            this.context.updatePerson('name',char.name);\r\n        }\r\n        if(prevState.gender !== char.gender) {\r\n            this.context.updatePerson('gender',char.gender);\r\n        }\r\n        if(prevState.alignment !== char.alignment) {\r\n            this.context.updatePerson('alignment',char.alignment);\r\n        }\r\n        if(prevState.languages !== char.languages) {\r\n            this.context.updatePerson('languages',char.languages);\r\n        }\r\n        if(prevState.tricks !== char.tricks) {\r\n            this.context.updatePerson('tricks',char.tricks);\r\n        }\r\n        if(prevState.tools !== char.tools) {\r\n            this.context.updatePerson('tools',char.tools);\r\n        }\r\n        if(prevState.dragons !== char.dragons) {\r\n            this.context.updatePerson('dragons',char.dragons);\r\n        }\r\n        if(prevState.skills !== char.skills) {\r\n            this.context.updatePerson('skills',char.skills, 1);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    getValue(key, event) {\r\n        const data = event.target.value;\r\n        this.setState({[key]: data}, this.handleData);\r\n    }\r\n\r\n    handleData() {\r\n        let char = this.state;\r\n        const species = this.props.species;\r\n        if(char.name !== '' && char.gender !== '' && char.alignment !== '') {\r\n            if(species === 'Drow - Dark Elf' || species === 'Forest Elf' || species === 'Halfling - Lightfoot' || species === 'Halfling - Stout' || species === 'Tiefling' || species === 'Forest Gnome' || species === 'Rock Gnome' || species === 'Half-Orc') {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if(species === 'Human' && char.languages.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if(species === 'Half-Elf' && char.languages.length !== 0 && this.context.person.skills.length === 2) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if(species === 'High Elf' && char.languages.length !== 0 && char.tricks.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if(species === 'Mountain Dwarf' && char.tools.length !== 0 || species === 'Hill Dwarf' && char.tools.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if(species === 'Dragonborn' && char.dragons.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const species = this.props.species;\r\n        if (this.props.currentStep !== 4) { \r\n            return (<></>)\r\n        }\r\n        return (\r\n            <>\r\n            <div><h2>Brave {species}. Tell us more about Yourself</h2></div>\r\n            <form className='charData' noValidate autoComplete=\"off\">\r\n                <TextField onChange={(e) =>this.getValue('name', e)} id=\"standard-basic\" label=\"Your name\" value={this.context.person.name} />\r\n                <TextField onChange={(e) =>this.getValue('gender', e)} id=\"standard-basic2\" label=\"Your gender\" value={this.context.person.gender} />\r\n                <FormControl className=\"classic\">\r\n                 <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick Your Alignment</InputLabel>\r\n                <Select \r\n                    onChange={(e) => this.getValue('alignment', e)}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    style={{color: \"#fff\"}}\r\n                    value={this.context.person.alignment}\r\n                >\r\n                      \r\n                    {data.species_char[species].alignment.map((align,index) => (\r\n                        <MenuItem  key={index} value={align}>{align}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n                {(this.props.species === 'Human' || this.props.species === 'High Elf' || this.props.species === 'Half-Elf') && <LanguagesPick getValue= {this.getValue} species = {this.props.species}/>}\r\n                {(this.props.species === 'High Elf') && <TrickPick getValue= {this.getValue} species = {this.props.species}/>}\r\n                {(this.props.species === 'Mountain Dwarf' || this.props.species === 'Hill Dwarf') && <ToolsPick getValue= {this.getValue}  profession={this.props.profession} step={this.props.currentStep} species = {this.props.species}/>}\r\n                {(this.props.species === 'Dragonborn') && <Dragons getValue= {this.getValue} species = {this.props.species}/>}\r\n                \r\n            </FormControl>\r\n            </form>\r\n                {(this.props.species === 'Half-Elf') && <HalfelfSkills getValue= {this.getValue} species = {this.props.species}/>}        \r\n            {(species !== 'Human') && \r\n                <h3>As {species}, You have proficiences: <br/>{data.species_char[species].proficiency.toString()}</h3>\r\n            }\r\n          \r\n            \r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}\r\nSpeciesChar.contextType=DataContext;\r\nexport default SpeciesChar;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\LanguagesPick.js",["187"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport {data} from './data/data.js';\r\n\r\nclass LanguagesPick extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n\r\n    render() {\r\n        const species = this.props.species;\r\n        return (\r\n            \r\n            <>\r\n            <Fade in={true}>\r\n             <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                 <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Additional Language</InputLabel>\r\n                <Select \r\n                    onChange={(e) => this.props.getValue('languages', e)}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    style={{color: \"#fff\"}}\r\n                >\r\n                      \r\n                      {data.species_char[species].languages.map((lang,index) => (\r\n                        <MenuItem  key={index} value={lang}>{lang}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            </Fade>\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nLanguagesPick.contextType=DataContext;\r\nexport default LanguagesPick;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\TrickPick.js",["188"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport {data} from './data/data.js';\r\n\r\nclass TrickPick extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n\r\n    render() {\r\n        const species = this.props.species;\r\n        return (\r\n            \r\n            <>\r\n            <Fade in={true}>\r\n             <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick One magic trick</InputLabel>\r\n                <Select \r\n                    onChange={(e) => this.props.getValue('tricks', e)}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    style={{color: \"#fff\"}}\r\n                    value={this.context.person.tricks[0]}\r\n                >\r\n                      {data.species_char[species].tricks.map((trick,index) => (\r\n                        <MenuItem  key={index} value={trick}>{trick}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            </Fade>\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nTrickPick.contextType=DataContext;\r\nexport default TrickPick;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\ToolsPick.js",["189"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport {data} from './data/data.js';\r\n\r\nclass ToolsPick extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n\r\n    render() {\r\n        const prof = this.props.profession;\r\n        const species = this.props.species;\r\n        const step = this.props.step;\r\n        let pick;\r\n        if (step === 6) {\r\n            pick = data.past[this.props.past].tools;\r\n        } else if (step === 4) {  \r\n            pick = data.species_char[species].tools;\r\n        } else {\r\n            pick = data.class_char[prof].tools;\r\n        }\r\n\r\n        return (\r\n            \r\n            <>\r\n            <Fade in={true}>\r\n                \r\n             <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                 <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick one artisan`s tool</InputLabel>\r\n                <Select \r\n                    onChange={(e) => this.props.getValue('tools', e)}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    style={{color: \"#fff\"}}\r\n            \r\n                >\r\n                     \r\n                        {pick.map((tool,index) => (\r\n                        <MenuItem  key={index} value={tool}>{tool}</MenuItem>\r\n                        )) }\r\n                       \r\n                  \r\n                </Select>\r\n            </FormControl>\r\n            </Fade>\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nToolsPick.contextType=DataContext;\r\nexport default ToolsPick;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Dragons.js",["190"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport {data} from './data/data.js';\r\n\r\nclass Dragons extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n\r\n    render() {\r\n        const species = this.props.species;\r\n        return (\r\n            \r\n            <>\r\n            <Fade in={true}>\r\n                \r\n             <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                 <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick Your Dragon</InputLabel>\r\n                <Select \r\n                    onChange={(e) => this.props.getValue('dragons', e)}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    style={{color: \"#fff\"}}\r\n                    value={this.context.person.dragons}\r\n                >\r\n                      \r\n                      {data.species_char[species].dragons.map((dragon,index) => (\r\n                        <MenuItem  key={index} value={dragon}>{dragon}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            </Fade>\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nDragons.contextType=DataContext;\r\nexport default Dragons;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Skills.js",["191","192","193","194","195","196"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\nimport {data} from './data/data.js';\r\nimport HalfElf from './HalfElf';\r\nimport SkillsClass from './SkillsClass';\r\n\r\n\r\nfunction withSubscription(WrappedComponent, objKey) {\r\n    \r\n    return class Skills extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n\r\n        }\r\n        \r\n        render() {\r\n        \r\n            return (\r\n                \r\n                <>\r\n                 <WrappedComponent species={this.props.species} getValue= {this.props.getValue} profession={this.props.profession}/>\r\n                {(this.context.person[objKey].length !== 0) && <h4>You've picked {this.context.person[objKey].toString()}</h4>}\r\n               </> \r\n            )\r\n        }\r\n        \r\n    \r\n    }\r\n    \r\n}\r\n\r\nconst HalfelfSkills = withSubscription(HalfElf, 'skills');\r\nconst ClassSkills = withSubscription(SkillsClass, 'classSkills');\r\nHalfelfSkills.contextType = DataContext;\r\nClassSkills.contextType = DataContext;\r\n\r\n\r\nexport {\r\n    HalfelfSkills,\r\n    ClassSkills,\r\n}","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\data\\data.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\ClassChar.js",["197","198","199","200","201"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport DataContext from './contexts/DataContext';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport {data} from './data/data.js';\r\nimport modificatorService from './services/modificator';\r\nimport {ClassSkills} from './Skills';\r\nimport Equip from './Equip';\r\nimport Instruments from './Instruments';\r\nimport ClassTricks from './ClassTricks';\r\nimport SpellsPick from './SpellsPick';\r\nimport Button from '@material-ui/core/Button';\r\nimport Domain from './Domain';\r\nimport Ranger from './Ranger';\r\nimport ToolsPick from './ToolsPick';\r\nimport Fighter from './Fighter';\r\n\r\nclass ClassChar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            classSkills: [],\r\n            instruments: [],\r\n            classTricks: [],\r\n            spells: [],\r\n            warlock: false,\r\n            warlock_spells: [],\r\n            domain: '',\r\n            deityTricks:[],\r\n            deityProf:[],\r\n            addLang: [],\r\n            equip1: [],\r\n            equip2: [],\r\n            equip3: [],\r\n            equip4: [],\r\n            enemy: '',\r\n            terrain: '',\r\n            patron: '',\r\n            monk_instr: false,\r\n            monk_tools: false,\r\n            tools: [],\r\n            fight_style: '',\r\n        }\r\n\r\n        this.getValue = this.getValue.bind(this);\r\n        this.handleData = this.handleData.bind(this);\r\n        this.setPatron = this.setPatron.bind(this);\r\n        this.setChoice = this.setChoice.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        let atr = this.state;\r\n        const profession = this.props.profession;\r\n        const deity = this.context.person.domain;\r\n        if(prevProps.currentStep !== this.props.currentStep) {\r\n        const mods = modificatorService.modificator(this.props.finals);\r\n        this.context.updatePerson('mods', mods);\r\n        }\r\n        if(prevProps.profession !== profession) {\r\n           if(prevProps.profession === 'Druid') this.context.cleanValue('languages');\r\n           if(profession === 'Druid') this.context.updatePerson('languages', 'Druidic');\r\n        }\r\n        if(prevState.classSkills !== atr.classSkills) {\r\n            this.context.updatePerson('classSkills', atr.classSkills, data.class_char[profession].skills_pick - 1);\r\n        }\r\n        if(prevState.equip1 !== atr.equip1) {\r\n            this.context.updatePerson('equip1', atr.equip1);\r\n        }\r\n        if(prevState.equip2 !== atr.equip2) {\r\n            this.context.updatePerson('equip2', atr.equip2);\r\n        }\r\n        if(prevState.equip3 !== atr.equip3) {\r\n            this.context.updatePerson('equip3', atr.equip3);\r\n        }\r\n        if(prevState.equip4 !== atr.equip4) {\r\n            this.context.updatePerson('equip4', atr.equip4);\r\n        }\r\n        if(prevState.instruments !== atr.instruments) {\r\n            this.context.updatePerson('instruments', atr.instruments, (profession === 'Bard') ? 2 : 0); \r\n        }\r\n        if(prevState.classTricks !== atr.classTricks) {\r\n            \r\n            this.context.updatePerson('classTricks', atr.classTricks, (deity === 'Light') ? 3 : data.class_char[profession].tricks_pick - 1); \r\n        }\r\n        if(prevState.spells !== atr.spells) {\r\n            this.context.updatePerson('spells', atr.spells, data.class_char[profession].spells_pick - 1); \r\n        }\r\n        if(prevState.domain !== atr.domain) {\r\n            this.context.updatePerson('domain', atr.domain); \r\n        }\r\n        if(prevState.deityTricks !== atr.deityTricks) {\r\n            this.context.updatePerson('deityTricks', atr.deityTricks); \r\n        }\r\n        if(prevState.deityProf !== atr.deityProf) {\r\n            this.context.updatePerson('deityProf', atr.deityProf, data.class_char[profession][deity].pick - 1); \r\n        }\r\n        if(prevState.addLang !== atr.addLang) {\r\n            this.context.updatePerson('addLang', atr.addLang, data.class_char[profession].lang_pick - 1); \r\n        }\r\n        if(prevState.enemy !== atr.enemy) {\r\n            this.context.updatePerson('enemy', atr.enemy); \r\n        }\r\n        if(prevState.terrain !== atr.terrain) {\r\n            this.context.updatePerson('terrain', atr.terrain); \r\n        }\r\n        if(prevState.patron !== atr.patron) {\r\n            this.context.updatePerson('patron', atr.patron); \r\n        }\r\n        if(prevState.tools !== atr.tools) {\r\n            this.context.updatePerson('tools', atr.tools); \r\n        }\r\n        if(prevState.fight_style !== atr.fight_style) {\r\n            this.context.updatePerson('fight_style', atr.fight_style); \r\n        }\r\n\r\n    }\r\n\r\n    getValue(key, event) {\r\n        if(key === 'tools') {\r\n            this.setState({[key]: event.target.value}, this.handleData);\r\n        } else {\r\n            this.setState({[key]: event}, this.handleData);\r\n        }\r\n        \r\n    }\r\n\r\n    handleData() {\r\n        let atr = this.state;\r\n        const prof = this.props.profession;\r\n        if(atr.classSkills.length !== 0 && atr.equip1.length !== 0 && atr.equip2.length !== 0) {\r\n            if(prof === 'Barbarian') {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if(prof === 'Bard' && atr.equip3.length !== 0 && atr.instruments.length !== 0 && atr.spells.length !== 0 && atr.classTricks.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if((prof === 'Warlock' || prof === 'Wizard' || prof === 'Sorcerer') && atr.equip3.length !== 0 && atr.spells.length !== 0 && atr.classTricks.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if((prof === 'Druid') && atr.classTricks.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if((prof === 'Cleric') && atr.equip3.length !== 0 && atr.equip4.length !== 0 && atr.classTricks.length !== 0 && atr.domain.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if((prof === 'Rogue' || prof === 'Paladin') && atr.equip3.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if((prof === 'Ranger') && atr.equip3.length !== 0 && atr.enemy.length !== 0 && atr.terrain.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if((prof === 'Monk') && (atr.tools.length !== 0 || atr.instruments.length !== 0 )) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            if((prof === 'Fighter') && atr.equip3.length !== 0 && atr.equip4.length !== 0 && atr.fight_style.length !== 0) {\r\n                this.props.buttonState('clicked');\r\n            }\r\n            \r\n            \r\n        }\r\n    }\r\n\r\n    setPatron(patron) {\r\n        let spells = [...data.class_char['Warlock'].spells];\r\n        if(patron === 'arcyfey') {\r\n            spells.push('Faerie Fire', 'Sleep')\r\n        } else if(patron === 'fiend') {\r\n            spells.push('Burning hands', 'Command')\r\n        } else {\r\n            spells.push('Bane', 'False life')\r\n        }\r\n        \r\n        this.setState({warlock_spells: spells, warlock: true, patron}, this.handleData)\r\n    }\r\n\r\n    setChoice(choice) {\r\n        if(choice === 'tools') {\r\n            this.context.cleanValue('instruments');\r\n            this.setState({monk_instr: false, monk_tools: true})\r\n        } else {\r\n            this.context.cleanValue('tools');\r\n            this.setState({monk_instr: true, monk_tools: false})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        \r\n        console.log(this.state);\r\n        const profession = this.props.profession;\r\n  \r\n        if (this.props.currentStep !== 5) { \r\n            return (<></>)\r\n        }\r\n        return (\r\n            <>\r\n            <div className=\"classAtr\"><h2>Brave {this.context.person.name}!</h2>\r\n            <h3>As {profession}:</h3>\r\n            <p><strong>Your class proficiencies are:</strong> {data.class_char[profession].proficiency.toString()}</p>\r\n            <p><strong>You have fighting proficiency in:</strong></p>\r\n                <ul>\r\n                    {(data.class_char[profession].armor.length > 0) && <li><strong>Armour:</strong> {data.class_char[profession].armor.toString()}</li>}\r\n                    <li><strong>Weapon:</strong> {data.class_char[profession].weapons.toString()}</li>\r\n                    {(profession !== 'Bard' && profession !== 'Monk') && data.class_char[profession].tools.length !== 0 ?\r\n                    <p><strong>You have tools proficiency in:</strong> {data.class_char[profession].tools.toString()}</p>\r\n                    : <></>}\r\n                    \r\n                </ul>\r\n          \r\n            <p>Your HitDice is: {data.class_char[profession].hit_dice}</p>\r\n            <p>Your current Hit Points are: {data.class_char[profession].hit_points + this.context.person.mods[2]}</p>\r\n            <ClassSkills profession={this.props.profession} getValue={this.getValue}/>\r\n            <Equip profession={this.props.profession} getValue={this.getValue}/>\r\n            {(profession === 'Bard') && <Instruments profession={profession} getValue={this.getValue} step={this.props.currentStep}/>}\r\n            {(profession === 'Bard' || profession === 'Warlock' || profession === 'Druid' || profession === 'Cleric' || profession === 'Wizard' || profession === 'Sorcerer') && <ClassTricks profession={profession} mainpick={true} getValue={this.getValue}/>}\r\n            {(profession === 'Bard' || profession === 'Wizard' || profession === 'Sorcerer') && <SpellsPick profession={profession} getValue={this.getValue}/>}\r\n\r\n            {(profession === 'Warlock') &&\r\n                <div className=\"patrons\">\r\n                    <h4>Pick Your Otherworldly Patron</h4>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.setPatron('arcyfey')}>Arcyfey</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.setPatron('fiend')}>The Fiend</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.setPatron('undead')}>The Undead</Button>\r\n                </div>\r\n            }\r\n            {(profession === 'Warlock' && this.state.warlock) && <SpellsPick profession={profession} getValue={this.getValue} spells={this.state.warlock_spells}/>}\r\n            {(profession === 'Cleric') && <Domain profession={profession} getValue={this.getValue} step={this.props.currentStep}/>}\r\n            {(profession === 'Ranger') && <div><Ranger profession={profession} getValue={this.getValue}/></div>}\r\n            {(profession === 'Monk') &&\r\n                <div className=\"patrons\">\r\n                    <h4>Pick one tool or one intrument</h4>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.setChoice('tools')}>Pick tool</Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.setChoice('instrument')}>Pick instrument</Button>\r\n                </div>\r\n            }\r\n             {(this.state.monk_tools) && <ToolsPick profession = {profession} getValue={this.getValue} step={this.props.currentStep}/>}\r\n             {(this.state.monk_instr) && <Instruments profession = {profession} getValue={this.getValue} step={this.props.currentStep}/>}   \r\n             {(profession === 'Fighter') && <div><Fighter profession={profession} getValue={this.getValue}/></div>}\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}\r\nClassChar.contextType=DataContext;\r\nexport default ClassChar;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\services\\modificator.js",["202"],"\r\n\r\nconst modificator = (values) => {\r\n    let mods = [];\r\n   values.forEach(value => {\r\n        for(let i = -5, b=1; i < 11; i ++) {\r\n            if(value <= b) {\r\n                    mods.push(i);\r\n                break;\r\n            }\r\n            b += 2;\r\n        }\r\n    });\r\n    return mods;\r\n}\r\n\r\nexport default {\r\n    modificator,\r\n}","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\HalfElf.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\SkillsClass.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Equip.js",["203","204","205","206"],"import React from 'react';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport {data} from './data/data.js';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport DataContext from './contexts/DataContext';\r\n\r\nclass Equip extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.context);\r\n        const profession = this.props.profession;\r\n       \r\n        console.log(this.state);\r\n        const standard = (\r\n            <>\r\n                <h3>Your equipment.</h3>\r\n                {data.class_char[profession].equip.map((item, index) => {\r\n                    if(typeof item === \"string\") {\r\n                        return (\r\n                            <p>You have {item} in your equipment. Pick the rest.</p>\r\n                        )\r\n                    } else {\r\n                        let eq;\r\n                        if(profession === 'Fighter') {\r\n                            eq = `equip${index+1}`;\r\n                        } else {eq = `equip${index}`;}\r\n                        \r\n                        return (\r\n                                <FormControl component=\"fieldset\">\r\n                                    <FormLabel component=\"legend\">Pick one from these:</FormLabel>\r\n                                    <RadioGroup aria-label=\"equipment\" name={eq} onChange={(e)=> this.props.getValue(eq, e.target.value)}>\r\n                                        {item.map((el,i) => (\r\n                                            <FormControlLabel key={i}  value={el} control={<Radio />} label={el}/>     \r\n                                        ))}\r\n                                    </RadioGroup>   \r\n                                </FormControl>  \r\n                        )\r\n                            \r\n                            \r\n                    }\r\n                })}\r\n            </>\r\n        );\r\n        return standard;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nEquip.contextType=DataContext;\r\nexport default Equip;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Instruments.js",["207"],"import React from 'react';\r\nimport {data} from './data/data.js';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\n\r\nclass Instruments extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const prof = this.props.profession;\r\n        const step = this.props.step;\r\n        let instr;\r\n        let pick;\r\n        if (step === 6) {\r\n            pick = data.past[this.props.past].instruments;\r\n            instr =  this.context.person.past_instruments;\r\n        } else {  \r\n            pick = data.class_char[prof].instruments;\r\n            instr =  this.context.person.instruments;\r\n        }\r\n        return (\r\n            <div className=\"instruments pick\">\r\n               {(prof === \"Bard\" && step !== 6) && <h4>You are musician! Pick your three best instruments</h4>}\r\n                <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                    <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">{(prof === 'Bard' && step !== 6) ? 'Pick three instruments' : 'Pick one instrument'}</InputLabel>\r\n                    <Select \r\n                        onChange={(e) => this.props.getValue('instruments', e.target.value)}\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        style={{color: \"#fff\"}}\r\n                    >\r\n                        \r\n                        {pick.map((tool,index) => (\r\n                        <MenuItem  key={index} value={tool}>{tool}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n                </FormControl>\r\n                {(instr.length !== 0) && <h4>You've picked {instr.toString()}</h4>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nInstruments.contextType=DataContext;\r\nexport default Instruments;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\ClassTricks.js",["208"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\nimport {data} from './data/data.js';\r\n\r\nclass ClassTricks extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n\r\n    render() {\r\n        const prof = this.props.profession;\r\n        let key;\r\n        let numb;\r\n        if(this.context.person.domain === 'Nature' && prof === 'Druid') {\r\n            key = 'deityTricks';\r\n            numb = 1;\r\n        } else { \r\n            key = 'classTricks'\r\n            numb = data.class_char[prof].tricks_pick;\r\n        }\r\n        return (\r\n            <>\r\n            <div className=\"tricks pick\">\r\n                {(this.context.person.domain === 'Nature' && prof === 'Druid') ? \r\n                <h4>As Nature Cleric You can pick 1 Druid trick</h4> \r\n                : <h4>As {prof} You can pick {data.class_char[prof].tricks_pick} tricks</h4>\r\n                }\r\n                 \r\n                <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                    <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick {numb} magic trick(s)</InputLabel>\r\n                    <Select \r\n                        onChange={(e) => this.props.getValue(key, e.target.value)}\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        style={{color: \"#fff\"}}\r\n                    >  \r\n                        {data.class_char[prof].classTricks.map((trick,index) => (\r\n                            <MenuItem  key={index} value={trick}>{trick}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n                {(this.context.person.classTricks.length !== 0 && this.props.mainpick) && <h4>You've picked {this.context.person.classTricks.toString()}</h4>}\r\n            </div>\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nClassTricks.contextType=DataContext;\r\nexport default ClassTricks;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\SpellsPick.js",["209","210"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport {data} from './data/data.js';\r\n\r\nclass SpellsPick extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n    render() {\r\n        const prof = this.props.profession;\r\n        return (\r\n            \r\n            <>\r\n            <div className=\"spells pick\">\r\n                <h4>As {prof} You can pick {data.class_char[prof].spells_pick} spells</h4>   \r\n             <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick {data.class_char[prof].spells_pick} spells</InputLabel>\r\n                \r\n                <Select \r\n                    onChange={(e) => this.props.getValue('spells', e.target.value)}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    style={{color: \"#fff\"}}\r\n                >  \r\n                {(prof === 'Warlock') ? \r\n                    this.props.spells.map((spell,index) => (\r\n                        <MenuItem  key={index} value={spell}>{spell}</MenuItem>\r\n                    ))\r\n                  : data.class_char[prof].spells.map((spell,index) => (\r\n                    <MenuItem  key={index} value={spell}>{spell}</MenuItem>\r\n                ))\r\n\r\n                }\r\n                </Select>\r\n            </FormControl>\r\n            {(this.context.person.spells.length !== 0) && <h4>You've picked {this.context.person.spells.toString()}</h4>}\r\n           </div>\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nSpellsPick.contextType=DataContext;\r\nexport default SpellsPick;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Domain.js",["211"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport {data} from './data/data.js';\r\nimport ClassTricks from './ClassTricks';\r\nimport ProficiencyPick from './ProficiencyPick';\r\nimport AddLang from './AddLang';\r\n\r\nclass Domain extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.domainEffects = this.domainEffects.bind(this);\r\n        this.getValue = this.getValue.bind(this);\r\n    }\r\n\r\n\r\n    domainEffects(domain) {\r\n        if(domain === 'Tempest') {\r\n            this.context.addValue('armour','martial weapons','heavy armour','classSpells','Fog Cloud','Thunderwave');\r\n        } else if (domain === 'Nature') {\r\n            this.context.addValue('classSpells','Animal Friendship','Speak with animals','armour','heavy armour');\r\n        } else if (domain === 'Trickery') {\r\n            this.context.addValue('classSpells','Charm Person','Disguise Self');\r\n        } else if (domain === 'Light') {\r\n            this.context.addValue('classSpells','Burning Hands','Faerie Fire','classTricks','Light');\r\n        } else if (domain === 'Knowledge') {\r\n            this.context.addValue('classSpells','Identify','Command','classTricks','Light');\r\n        } else if (domain === 'War') {\r\n            this.context.addValue('classSpells','Divine Favor','Shield of Faith','armour','martial weapons','heavy armour');\r\n        } else if (domain === 'Life') {\r\n            this.context.addValue('classSpells','Cure Wounds','\tBless','armour','heavy armour');\r\n        }\r\n        this.props.getValue('domain', domain);\r\n    }\r\n\r\n\r\n    getValue(key, event) {\r\n        this.props.getValue(key, event)\r\n    }\r\n    \r\n\r\n    render() {\r\n        const prof = this.props.profession;\r\n        const nature = (\r\n            <>\r\n            <ClassTricks profession={'Druid'} mainpick={false} getValue={this.getValue}/>\r\n            <ProficiencyPick profession={'Cleric'} getValue={this.getValue}/>\r\n            </>\r\n        )\r\n\r\n        const knowledge = (\r\n            <>\r\n            <ProficiencyPick profession={'Cleric'} getValue={this.getValue}/>\r\n            <AddLang profession={prof} getValue={this.getValue} step = {this.props.step}/>\r\n            </>\r\n        )\r\n\r\n        return ( \r\n            <>\r\n            <div className=\"spells pick\">\r\n                <h4>As Cleric You have to choose one domain related to your deity</h4>   \r\n             <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick one domain</InputLabel>\r\n                \r\n                <Select \r\n                    onChange={(e) => this.domainEffects(e.target.value)}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    style={{color: \"#fff\"}}\r\n                >  \r\n                {data.class_char['Cleric'].domains.map((domain,index) => (\r\n                    <MenuItem  key={index} value={domain}>{domain}</MenuItem>\r\n                ))\r\n                }\r\n                </Select>\r\n            </FormControl>\r\n            {(this.context.person.domain === 'Nature') && nature}\r\n            {(this.context.person.domain === 'Knowledge') && knowledge}\r\n           </div>\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nDomain.contextType=DataContext;\r\nexport default Domain;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\ProficiencyPick.js",["212","213"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport {data} from './data/data.js';\r\n\r\nclass ProficiencyPick extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const prof = this.props.profession;\r\n        const domain = this.context.person.domain;\r\n        return (\r\n            \r\n            <>\r\n            <div className=\"spells pick\">\r\n                <h4>As {domain} Cleric You can pick {data.class_char[prof][domain].pick} additional skill(s)</h4>   \r\n             <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick {data.class_char[prof][domain].pick} skill(s)</InputLabel>\r\n                \r\n                <Select \r\n                    onChange={(e) => this.props.getValue('deityProf', e.target.value)}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    style={{color: \"#fff\"}}\r\n                >  \r\n                {data.class_char[prof][domain].prof.map((skill,index) => (\r\n                    <MenuItem  key={index} value={skill}>{skill}</MenuItem>\r\n                ))\r\n\r\n                }\r\n                </Select>\r\n            </FormControl>\r\n            {(this.context.person.deityProf.length !== 0) && <h4>You've picked {this.context.person.deityProf.toString()}</h4>}\r\n           </div>\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nProficiencyPick.contextType=DataContext;\r\nexport default ProficiencyPick;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\AddLang.js",["214","215"],"import React from 'react';\r\nimport 'fontsource-roboto';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport DataContext from './contexts/DataContext';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport {data} from './data/data.js';\r\n\r\nclass AddLang extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n\r\n    render() {\r\n        const step = this.props.step;\r\n        const prof = this.props.profession;\r\n        let lang;\r\n        let pick;\r\n\r\n\r\n        if (step === 6) {\r\n            pick = data.past[this.props.past];\r\n            lang =  this.context.person.past_lang;\r\n            console.log(pick);\r\n        } else {  \r\n            pick = data.class_char[prof]\r\n            lang =  this.context.person.addLang;\r\n        }\r\n        \r\n        return (\r\n            \r\n            <>\r\n            <h4>You can pick {pick.lang_pick} language(s)</h4>\r\n             <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                 <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Additional Language</InputLabel>\r\n                <Select \r\n                    onChange={(e) => this.props.getValue('addLang', e.target.value)}\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    style={{color: \"#fff\"}}\r\n                >   \r\n                      {pick.languages.map((lang,index) => (\r\n                        <MenuItem  key={index} value={lang}>{lang}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n            {(lang.length !== 0) && <h4>You've picked {lang.toString()}</h4>}\r\n           \r\n           </> \r\n        )\r\n    }\r\n\r\n}\r\n\r\nAddLang.contextType=DataContext;\r\nexport default AddLang;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Ranger.js",["216"],"import React from 'react';\r\nimport {data} from './data/data.js';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\n\r\nclass Ranger extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const profession = this.props.profession;\r\n        return (\r\n            <div className=\"enemy pick\">\r\n               <h4>Ranger! Pick your best enemy</h4>\r\n                <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                    <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick one enemy</InputLabel>\r\n                    <Select \r\n                        onChange={(e) => this.props.getValue('enemy', e.target.value)}\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        style={{color: \"#fff\"}}\r\n                    \r\n                    >  \r\n                        {data.class_char[profession].enemy.map((enemy,index) => (\r\n                        <MenuItem  key={index} value={enemy}>{enemy}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n                </FormControl>\r\n\r\n                <h4>Pick your favorite type of terrain for rangering</h4>\r\n                <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                    <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick one type of land</InputLabel>\r\n                    <Select \r\n                        onChange={(e) => this.props.getValue('terrain', e.target.value)}\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        style={{color: \"#fff\"}}\r\n                    \r\n                    >  \r\n                        {data.class_char[profession].terrain.map((terrain,index) => (\r\n                        <MenuItem  key={index} value={terrain}>{terrain}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n                </FormControl>\r\n              \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Ranger;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Fighter.js",["217"],"import React from 'react';\r\nimport {data} from './data/data.js';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\n\r\nclass Fighter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const profession = this.props.profession;\r\n        return (\r\n            <div className=\"enemy pick\">\r\n               <h4>Fighter! Pick your fighting style!</h4>\r\n                <FormControl className=\"classic\" style={{marginTop: '16px'}}>\r\n                    <InputLabel style={{color: \"#fff\"}} id=\"demo-simple-select-label\">Pick one fighting style</InputLabel>\r\n                    <Select \r\n                        onChange={(e) => this.props.getValue('fight_style', e.target.value)}\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        style={{color: \"#fff\"}}\r\n                    \r\n                    >  \r\n                        {data.class_char[profession].fight_styles.map((style,index) => (\r\n                        <MenuItem  key={index} value={style}>{style}</MenuItem>\r\n                    ))}\r\n                </Select>\r\n                </FormControl>\r\n              \r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Fighter;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Past.js",[],"C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\Sheet.js",["218","219"],"import React from 'react';\r\nimport info from './data/data.js';\r\nimport DataContext from './contexts/DataContext';\r\nimport { Document, Page, Text, View, StyleSheet } from '@react-pdf/renderer';\r\nimport skillsService from './services/skillsMods';\r\n\r\nclass Sheet extends React.Component {\r\n    SKILLSARR = [\r\n        'Acrobatics (Dex)',\r\n        'Animal Handling (Wis)',\r\n        'Arcana (Int)',\r\n        'Athletics (Str)',\r\n        'Deception (Cha)',\r\n        'History (Int)',\r\n        'Insight (Wis)',\r\n        'Intimidation (Cha)',\r\n        'Investigation (Int)',\r\n        'Medicine (Wis)',\r\n        'Nature (Int)',\r\n        'Perception (Wis)',\r\n        'Performance (Cha)',\r\n        'Persuasion (Cha)',\r\n        'Religion (Int)',\r\n        'Sleight of Hand (Dex)',\r\n        'Stealth (Dex)',\r\n        'Survival (Wis)'\r\n    ];\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n       \r\n\r\n        this.state = {\r\n            skillsMod: [],\r\n            perception: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const mods = this.context.person.mods;\r\n        const species = this.props.species;\r\n        const prof = this.props.profession;\r\n        const background = this.context.person.past;\r\n        const pastSkills = info.past[background].proficiency;\r\n        const allSkills = this.context.person.classSkills.concat(this.context.person.skills, pastSkills ,this.context.person.deityProf, info.species_char[species].skillsStatic);\r\n        const skills = skillsService.skillsMods(allSkills, mods);\r\n        this.setState({skillsMod: skills});\r\n        allSkills.forEach((skill)=>{\r\n            if(skill === 'Perception') this.setState({perception: true});\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n   \r\n\r\n    render() {\r\n        if (this.props.currentStep !== 7) { \r\n            return (<></>)\r\n        }  \r\n        console.log(this.context);\r\n        const species = this.props.species;\r\n        const prof = this.props.profession;\r\n        const background = this.context.person.past;\r\n        const saving1 = info.class_char[prof].saving_throws[0];\r\n        const saving2 = info.class_char[prof].saving_throws[1];\r\n        const mods = this.context.person.mods;\r\n        let allLang =  info.species_char[species].basic_languages.concat(this.context.person.languages, this.context.person.addLang, this.context.person.past_lang);\r\n        allLang = allLang.toString();\r\n        allLang = allLang.replace(/,/g, \", \");\r\n        let weapons = info.class_char[prof].weapons.toString();\r\n        weapons = weapons.replace(/,/g, \", \");\r\n        let armor = info.class_char[prof].armor.toString();\r\n        armor = armor.replace(/,/g, \", \");\r\n        let allInstr = this.context.person.instruments.concat(this.context.person.past_instruments).toString();\r\n        allInstr = allInstr.replace(/,/g, \", \");\r\n        let allTools = this.context.person.tools.concat(this.context.person.past_tools, info.past[background].tool_prof).toString();\r\n        allTools = allTools.replace(/,/g, \", \");\r\n        let allEquip = info.past[background].equip.concat(this.context.person.equip1, this.context.person.equip2, this.context.person.equip3, this.context.person.equip4);\r\n        const allProf = info.species_char[species].proficiency.concat(info.class_char[prof].proficiency);\r\n        if(prof !== 'Fighter') allEquip.push(info.class_char[prof].equip[0]);\r\n        let allTricks = this.context.person.tricks.concat(this.context.person.classTricks, this.context.person.deityTricks,info.species_char[species].tricksStatic).toString();\r\n        allTricks = allTricks.replace(/,/g, \", \");\r\n        let allSpells = this.context.person.spells.concat(this.context.person.classSpells).toString();\r\n        allSpells = allSpells.replace(/,/g, \", \");\r\n        console.log(allTricks.length);\r\n        console.log(allSpells.length);\r\n        return (\r\n            <div className=\"page-container\">\r\n            <Document>\r\n            <Page \r\n            size=\"A4\" \r\n            id=\"sheet\" wrap>\r\n                    <View className=\"background-img\">\r\n                        <View className=\"leftColumn\">\r\n                            <Text>{this.context.person.name}</Text>\r\n                        </View>\r\n                        <View className=\"rightColumn\">\r\n                            <View className=\"innerCol\">\r\n                                <Text className=\"headerText\">{this.props.profession}</Text>\r\n                                <Text className=\"headerText\">{this.context.person.past}</Text>\r\n                                <Text className=\"headerText\"></Text>\r\n                            </View>\r\n                            <View className=\"innerCol\">\r\n                                <Text className=\"headerText\">{this.props.species}</Text>\r\n                                <Text className=\"headerText\">{this.context.person.alignment}</Text>\r\n                                <Text className=\"headerText\"></Text>\r\n                            </View>\r\n                        </View>\r\n                    </View>\r\n                    <View id=\"main\">\r\n                        <View className=\"col1\">\r\n                            <View className=\"mods\">\r\n                                <View className=\"featuresCol\" style={{flexGrow:1}}>\r\n                                    <View className=\"featureBox\">\r\n                                        <Text>Strength</Text>\r\n                                        <Text>{(this.context.person.mods[0] > 0) ? `+${this.context.person.mods[0]}` : this.context.person.mods[0]}</Text>\r\n                                        <Text>{this.context.finalValues[0]}</Text>\r\n                                    </View>\r\n                                    <View className=\"featureBox\">\r\n                                        <Text>Dexterity</Text>\r\n                                        <Text>{(this.context.person.mods[1] > 0) ? `+${this.context.person.mods[1]}` : this.context.person.mods[1]}</Text>\r\n                                        <Text>{this.context.finalValues[1]}</Text>\r\n                                    </View>\r\n                                    <View className=\"featureBox\">\r\n                                        <Text>Constitution</Text>\r\n                                        <Text>{(this.context.person.mods[2] > 0) ? `+${this.context.person.mods[2]}` : this.context.person.mods[2] }</Text>\r\n                                        <Text>{this.context.finalValues[2]}</Text>\r\n                                    </View>\r\n                                    <View className=\"featureBox\">\r\n                                        <Text>Intelligence</Text>\r\n                                        <Text>{(this.context.person.mods[3] > 0) ? `+${this.context.person.mods[3]}` : this.context.person.mods[3]}</Text>\r\n                                        <Text>{this.context.finalValues[3]}</Text>\r\n                                    </View>\r\n                                    <View className=\"featureBox\">\r\n                                        <Text>Wisdom</Text>\r\n                                        <Text>{(this.context.person.mods[4] > 0) ? `+${this.context.person.mods[4]}` : this.context.person.mods[4]}</Text>\r\n                                        <Text>{this.context.finalValues[4]}</Text>\r\n                                    </View>\r\n                                    <View className=\"featureBox\">\r\n                                        <Text>Charisma</Text>\r\n                                        <Text>{(this.context.person.mods[5] > 0) ? `+${this.context.person.mods[5]}` : this.context.person.mods[5]}</Text>\r\n                                        <Text>{this.context.finalValues[5]}</Text>\r\n                                    </View>\r\n                                </View>\r\n                                <View className=\"skillsCol\" style={{flexGrow:3}}>\r\n                                    <View>\r\n                                        <Text></Text>\r\n                                        <Text>Inspiration</Text>\r\n                                    </View>\r\n                                    <View>\r\n                                        <Text>+2</Text>\r\n                                        <Text>Proficiency Bonus</Text>\r\n                                    </View>\r\n                                    <View className=\"saving\">\r\n                                        <View className={(saving1 === 'Strength' || saving2 === 'Strength') && \"profi\"}>\r\n                                            <Text>\r\n                                                {(saving1 === 'Strength' || saving2 === 'Strength') ? (2 + this.context.person.mods[0] > 0 ? `+${2 + this.context.person.mods[0]}` : 2 + this.context.person.mods[0]) : (this.context.person.mods[0] > 0 ? `+${this.context.person.mods[0]}` : this.context.person.mods[0]) }\r\n                                            </Text>\r\n                                            <Text>Strength</Text>\r\n                                        </View>\r\n                                        <View className={(saving1 === 'Dexterity' || saving2 === 'Dexterity') && \"profi\"}>\r\n                                            <Text>{(saving1 === 'Dexterity' || saving2 === 'Dexterity') ? (2 + this.context.person.mods[1] > 0 ? `+${2 + this.context.person.mods[1]}` : 2 + this.context.person.mods[1]) : (this.context.person.mods[1] > 0 ? `+${this.context.person.mods[1]}` : this.context.person.mods[1]) }</Text>\r\n                                            <Text>Dexterity</Text>\r\n                                        </View>\r\n                                        <View className={(saving1 === 'Constitution' || saving2 === 'Constitution') && \"profi\"}>\r\n                                            <Text>{(saving1 === 'Constitution' || saving2 === 'Constitution') ? (2 + this.context.person.mods[2] > 0 ? `+${2 + this.context.person.mods[2]}` : 2 + this.context.person.mods[2]) : (this.context.person.mods[2] > 0 ? `+${this.context.person.mods[2]}` : this.context.person.mods[2]) }</Text>\r\n                                            <Text>Constitution</Text>\r\n                                        </View>\r\n                                        <View className={(saving1 === 'Intelligence' || saving2 === 'Intelligence') && \"profi\"}>\r\n                                            <Text>{(saving1 === 'Intelligence' || saving2 === 'Intelligence') ? (2 + this.context.person.mods[3] > 0 ? `+${2 + this.context.person.mods[3]}` : 2 + this.context.person.mods[3]) : (this.context.person.mods[3] > 0 ? `+${this.context.person.mods[3]}` : this.context.person.mods[3]) }</Text>\r\n                                            <Text>Intelligence</Text>\r\n                                        </View>\r\n                                        <View className={(saving1 === 'Wisdom' || saving2 === 'Wisdom') && \"profi\"}>\r\n                                            <Text>{(saving1 === 'Wisdom' || saving2 === 'Wisdom') ? (2 + this.context.person.mods[4] > 0 ? `+${2 + this.context.person.mods[4]}` : 2 + this.context.person.mods[4]) : (this.context.person.mods[4] > 0 ? `+${this.context.person.mods[4]}` : this.context.person.mods[4]) }</Text>\r\n                                            <Text>Wisdom</Text>\r\n                                        </View>\r\n                                        <View className={(saving1 === 'Charisma' || saving2 === 'Charisma') && \"profi\"}>\r\n                                            <Text>{(saving1 === 'Charisma' || saving2 === 'Charisma') ? (2 + this.context.person.mods[5] > 0 ? `+${2 + this.context.person.mods[5]}` : 2 + this.context.person.mods[5]) : (this.context.person.mods[5] > 0 ? `+${this.context.person.mods[5]}` : this.context.person.mods[5]) }</Text>\r\n                                            <Text>Charisma</Text>\r\n                                        </View>\r\n                                        <View>\r\n                                            <Text>Saving Throws</Text>\r\n                                        </View>\r\n                                    </View>\r\n                                    <View className=\"saving\">\r\n                                        {(this.state.skillsMod.length > 0) &&\r\n                                        this.SKILLSARR.map((skill, i) => (\r\n                                            <View className={(this.state.skillsMod[i][1]) && \"profi\"}>\r\n                                                <Text>{(this.state.skillsMod[i][0] > 0) ? `+${this.state.skillsMod[i][0]}` : this.state.skillsMod[i][0]}</Text> \r\n                                                <Text>{skill}</Text>\r\n                                            </View>\r\n\r\n                                        ))}\r\n                                        <View>\r\n                                            <Text>Skills</Text>\r\n                                        </View>\r\n                                    </View>\r\n                                    \r\n                                </View>\r\n                            </View>\r\n                            <View className=\"wisdom\">\r\n                                <Text>{(this.state.perception) ? (12 + mods[4]) : 10 + mods[4]}</Text>\r\n                                <Text>Passive Wisdom (Perception)</Text>\r\n                            </View>\r\n                            <View className=\"block\">\r\n                                    <Text>{`Languages - ${allLang}`}</Text>   \r\n                                    <Text>{`Weapons - ${weapons}`}</Text> \r\n                                    <Text>{(armor.length !== 0) && `Armor - ${armor}`}</Text> \r\n                                    <Text>{(allInstr.length !== 0) && `Instruments - ${allInstr}`}</Text> \r\n                                    <Text>{(allTools.length !== 0) && `Tools - ${allTools}`}</Text> \r\n                                    <Text>Other Proficiencies & Languages</Text>            \r\n                            </View>\r\n                        </View>\r\n                        <View className=\"col2\">\r\n                            <View class=\"background-armor\">\r\n                                <View>\r\n                                    <Text></Text>\r\n                                </View>\r\n                                <View>\r\n                                    <Text>{(this.context.person.mods[1] > 0) ? `+${this.context.person.mods[1]}` : this.context.person.mods[1]}</Text>\r\n                                </View>\r\n                                <View>\r\n                                    <Text>{info.species_char[species].speed}</Text>\r\n                                </View>\r\n                            </View>\r\n                            <View class=\"two-blocks\">\r\n                                <Text>Hit Point Maximum<span>{info.class_char[prof].hit_points + mods[2]}</span></Text>\r\n                                <Text></Text>\r\n                                <Text>Current Hit Points</Text>\r\n                            </View>\r\n                            <View class=\"hitpoints\">\r\n                                <Text>Temporary Hit Points</Text>\r\n                            </View>\r\n                            <View class=\"hitdice\">\r\n                                <View class=\"dice\">\r\n                                    <Text>Total<span></span></Text>\r\n                                    <Text>{info.class_char[prof].hit_dice}</Text>\r\n                                    <Text>Hitdice</Text>\r\n                                </View>\r\n                                <View class=\"deaths\">\r\n                                    <Text>\r\n                                        <span class=\"text\">Successes</span>\r\n                                        <div class=\"radio\"></div>\r\n                                        <div class=\"radio\"></div>\r\n                                        <div class=\"radio\"></div>\r\n                                    </Text>\r\n                                    <Text>\r\n                                        <span class=\"text\">Failures</span>\r\n                                        <div class=\"radio\"></div>\r\n                                        <div class=\"radio\"></div>\r\n                                        <div class=\"radio\"></div>\r\n                                    </Text>\r\n                                    <Text>Death saves</Text>\r\n                                </View>\r\n                            </View>\r\n                            <View className=\"weapons saving\">\r\n                                <table>\r\n                                    <tr>\r\n                                        <th>Name</th>\r\n                                        <th>Atk Bonus</th>\r\n                                        <th>Damage/Type</th>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td></td>\r\n                                        <td></td>\r\n                                        <td></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td></td>\r\n                                        <td></td>\r\n                                        <td></td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td></td>\r\n                                        <td></td>\r\n                                        <td></td>\r\n                                    </tr>\r\n                                </table>\r\n                                <Text>Attacs & Spellcasting</Text>\r\n                            </View>\r\n                            <View className=\"equip\">\r\n                                <View>\r\n                                    <View>\r\n                                        <View class=\"currency\">\r\n                                            <Text>CP</Text>\r\n                                        </View>\r\n                                        <View className='octagonWrap'>\r\n                                            <Text></Text>\r\n                                            <span className='left'></span>\r\n                                            <span className='right'></span>\r\n                                        </View>        \r\n                                    </View>\r\n                                    <View>\r\n                                        <View class=\"currency\">\r\n                                            <Text>SP</Text>\r\n                                        </View>\r\n                                        <View className='octagonWrap'>\r\n                                            \r\n                                            <Text></Text>\r\n                                            <span className='left'></span>\r\n                                            <span className='right'></span>\r\n                                        </View>        \r\n                                    </View>\r\n                                    <View>\r\n                                        <View class=\"currency\">\r\n                                            <Text>EP</Text>\r\n                                        </View>\r\n                                        <View className='octagonWrap'>\r\n                                            \r\n                                            <Text></Text>\r\n                                            <span className='left'></span>\r\n                                            <span className='right'></span>\r\n                                        </View>        \r\n                                    </View>\r\n                                    <View>\r\n                                        <View class=\"currency\">\r\n                                            <Text>GP</Text>\r\n                                        </View>\r\n                                        <View className='octagonWrap'>\r\n                                            \r\n                                            <Text className=\"basic-money\">{info.past[background].money.toString()}</Text>\r\n                                            <span className='left'></span>\r\n                                            <span className='right'></span>\r\n                                        </View>        \r\n                                    </View>\r\n                                    \r\n                                    <View>\r\n                                        <View class=\"currency\">\r\n                                            <Text>PP</Text>\r\n                                        </View>\r\n                                        <View className='octagonWrap'>\r\n                                            \r\n                                            <Text></Text>\r\n                                            <span className='left'></span>\r\n                                            <span className='right'></span>\r\n                                        </View>        \r\n                                    </View>\r\n                                </View>\r\n                                <View>\r\n                                        {allEquip.map((equip, index) => (\r\n                                            <Text key={index}>--{equip}</Text>\r\n                                        ))}\r\n\r\n                                </View>\r\n                                <Text>Equipment</Text>\r\n                            </View>                        \r\n\r\n                        </View>\r\n                        <View className=\"col3\">\r\n                            <View class=\"personality\">\r\n                                <View>\r\n                                    <Text>{this.context.person.traits.toString()}</Text>\r\n                                    <Text>Personality Traits</Text>\r\n                                </View>\r\n                                <View>\r\n                                    <Text>{this.context.person.ideals}</Text>\r\n                                    <Text>Ideals</Text>\r\n                                </View>   \r\n                                <View>\r\n                                    <Text>{this.context.person.bonds}</Text>\r\n                                    <Text>Bonds</Text>\r\n                                </View>  \r\n                                <View>\r\n                                    <Text>{this.context.person.flaws}</Text>\r\n                                    <Text>Flaws</Text>\r\n                                </View>                \r\n                            </View>\r\n                            <View class=\"features\">\r\n                                {allProf.map((prof) => (\r\n                                    <Text class=\"prof\">{prof}</Text>\r\n                                ))}\r\n                                <Text>{(this.context.person.domain !== '') && `Your Divine Domain: ${this.context.person.domain}`}</Text>\r\n                                <Text>{(this.context.person.fight_style !== '') && `Your fight style: ${this.context.person.fight_style}`}</Text>\r\n                                <Text>{(this.context.person.patron !== '') && `Your patron: ${this.context.person.patron}`}</Text>\r\n                                <Text>{(this.context.person.dragons.length > 0) && `Your Draconic Ancestry: ${this.context.person.dragons.toString()}`}</Text>\r\n                                <Text>{(this.context.person.enemy.length > 0) && `Your favorite enemy: ${this.context.person.enemy}`}</Text>\r\n                                <Text>{(this.context.person.terrain.length > 0) && `Your favorite terrain: ${this.context.person.terrain}`}</Text>\r\n                                <Text>Features & Traits</Text>              \r\n                            </View>\r\n                        </View>            \r\n                    </View>\r\n                    {((allTricks.length > 0) || (allSpells.length > 0)) && \r\n                        <View className=\"magic\">\r\n                            <Text>{(allTricks.length > 0) && `Tricks`}</Text>\r\n                            <Text>{(allTricks.length > 0) && `Tricks You know: ${allTricks}`}</Text>\r\n                            <Text>{(allSpells.length > 0) && `Spells`}</Text>\r\n                            <Text>{(allSpells.length > 0) && `Spells You know: ${allSpells}`}</Text>\r\n                        </View>\r\n                    }\r\n                    \r\n\r\n                   \r\n                    \r\n                </Page>\r\n            </Document>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nSheet.contextType=DataContext;\r\nexport default Sheet;","C:\\Users\\Własciciel\\Desktop\\Firma\\korki\\React\\dd-generator\\src\\services\\skillsMods.js",["220","221"],"\r\n\r\n\r\n\r\nconst skillsMods = (allSkills, mods) => {\r\n    const noDuplicates = [...new Set(allSkills)];\r\n    console.log(noDuplicates);\r\n    let skillsMod = [];\r\n    const skills = [\r\n        ['Acrobatics', mods[1]],\r\n        ['Animal Handling',mods[4]],\r\n        ['Arcana',mods[3]],\r\n        ['Athletics',mods[0]],\r\n        ['Deception',mods[5]],\r\n        ['History',mods[3]],\r\n        ['Insight',mods[4]],\r\n        ['Intimidation',mods[5]],\r\n        ['Investigation',mods[3]],\r\n        ['Medicine',mods[4]],\r\n        ['Nature',mods[3]],\r\n        ['Perception',mods[4]],\r\n        ['Performance',mods[5]],\r\n        ['Persuasion',mods[5]],\r\n        ['Religion',mods[3]],\r\n        ['Sleight of Hand',mods[1]],\r\n        ['Stealth',mods[1]],\r\n        ['Survival',mods[4]],\r\n    ];\r\n    skills.map((skill) => {\r\n        let notPushed = true;\r\n        noDuplicates.forEach((charSkill)=> {\r\n            if(charSkill === skill[0]) {\r\n                skillsMod.push([2+skill[1],1]);\r\n                notPushed = false;\r\n            } \r\n        });\r\n        if (notPushed) skillsMod.push([skill[1],0]);\r\n\r\n    });\r\n    return skillsMod;   \r\n\r\n}\r\n\r\nexport default {skillsMods}",{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":10,"column":3,"nodeType":"228","messageId":"229","endLine":13,"endColumn":4},{"ruleId":"230","severity":1,"message":"231","line":3,"column":8,"nodeType":"232","messageId":"233","endLine":3,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":4,"column":8,"nodeType":"232","messageId":"233","endLine":4,"endColumn":16},{"ruleId":"230","severity":1,"message":"235","line":5,"column":8,"nodeType":"232","messageId":"233","endLine":5,"endColumn":14},{"ruleId":"230","severity":1,"message":"236","line":6,"column":8,"nodeType":"232","messageId":"233","endLine":6,"endColumn":18},{"ruleId":"230","severity":1,"message":"237","line":3,"column":10,"nodeType":"232","messageId":"233","endLine":3,"endColumn":20},{"ruleId":"230","severity":1,"message":"238","line":4,"column":8,"nodeType":"232","messageId":"233","endLine":4,"endColumn":14},{"ruleId":"230","severity":1,"message":"239","line":9,"column":8,"nodeType":"232","messageId":"233","endLine":9,"endColumn":22},{"ruleId":"240","severity":1,"message":"241","line":30,"column":1,"nodeType":"242","endLine":32,"endColumn":2},{"ruleId":"230","severity":1,"message":"236","line":4,"column":8,"nodeType":"232","messageId":"233","endLine":4,"endColumn":18},{"ruleId":"243","severity":1,"message":"244","line":91,"column":45,"nodeType":"245","messageId":"246","endLine":91,"endColumn":47},{"ruleId":"243","severity":1,"message":"244","line":91,"column":72,"nodeType":"245","messageId":"246","endLine":91,"endColumn":74},{"ruleId":"243","severity":1,"message":"247","line":91,"column":72,"nodeType":"245","messageId":"246","endLine":91,"endColumn":74},{"ruleId":"243","severity":1,"message":"247","line":91,"column":100,"nodeType":"245","messageId":"246","endLine":91,"endColumn":102},{"ruleId":"226","severity":1,"message":"227","line":12,"column":5,"nodeType":"228","messageId":"229","endLine":14,"endColumn":6},{"ruleId":"226","severity":1,"message":"227","line":12,"column":5,"nodeType":"228","messageId":"229","endLine":14,"endColumn":6},{"ruleId":"226","severity":1,"message":"227","line":12,"column":5,"nodeType":"228","messageId":"229","endLine":14,"endColumn":6},{"ruleId":"226","severity":1,"message":"227","line":12,"column":5,"nodeType":"228","messageId":"229","endLine":14,"endColumn":6},{"ruleId":"230","severity":1,"message":"231","line":3,"column":8,"nodeType":"232","messageId":"233","endLine":3,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":4,"column":8,"nodeType":"232","messageId":"233","endLine":4,"endColumn":16},{"ruleId":"230","severity":1,"message":"235","line":5,"column":8,"nodeType":"232","messageId":"233","endLine":5,"endColumn":14},{"ruleId":"230","severity":1,"message":"236","line":6,"column":8,"nodeType":"232","messageId":"233","endLine":6,"endColumn":18},{"ruleId":"230","severity":1,"message":"248","line":8,"column":9,"nodeType":"232","messageId":"233","endLine":8,"endColumn":13},{"ruleId":"226","severity":1,"message":"227","line":16,"column":9,"nodeType":"228","messageId":"229","endLine":19,"endColumn":10},{"ruleId":"230","severity":1,"message":"249","line":4,"column":8,"nodeType":"232","messageId":"233","endLine":4,"endColumn":17},{"ruleId":"230","severity":1,"message":"231","line":5,"column":8,"nodeType":"232","messageId":"233","endLine":5,"endColumn":19},{"ruleId":"230","severity":1,"message":"234","line":6,"column":8,"nodeType":"232","messageId":"233","endLine":6,"endColumn":16},{"ruleId":"230","severity":1,"message":"235","line":7,"column":8,"nodeType":"232","messageId":"233","endLine":7,"endColumn":14},{"ruleId":"230","severity":1,"message":"236","line":8,"column":8,"nodeType":"232","messageId":"233","endLine":8,"endColumn":18},{"ruleId":"240","severity":1,"message":"241","line":17,"column":1,"nodeType":"242","endLine":19,"endColumn":2},{"ruleId":"230","severity":1,"message":"234","line":3,"column":8,"nodeType":"232","messageId":"233","endLine":3,"endColumn":16},{"ruleId":"230","severity":1,"message":"235","line":4,"column":8,"nodeType":"232","messageId":"233","endLine":4,"endColumn":14},{"ruleId":"230","severity":1,"message":"236","line":5,"column":8,"nodeType":"232","messageId":"233","endLine":5,"endColumn":18},{"ruleId":"226","severity":1,"message":"227","line":14,"column":5,"nodeType":"228","messageId":"229","endLine":16,"endColumn":6},{"ruleId":"226","severity":1,"message":"227","line":10,"column":5,"nodeType":"228","messageId":"229","endLine":12,"endColumn":6},{"ruleId":"226","severity":1,"message":"227","line":11,"column":5,"nodeType":"228","messageId":"229","endLine":13,"endColumn":6},{"ruleId":"230","severity":1,"message":"250","line":8,"column":8,"nodeType":"232","messageId":"233","endLine":8,"endColumn":12},{"ruleId":"226","severity":1,"message":"227","line":12,"column":5,"nodeType":"228","messageId":"229","endLine":15,"endColumn":6},{"ruleId":"230","severity":1,"message":"250","line":8,"column":8,"nodeType":"232","messageId":"233","endLine":8,"endColumn":12},{"ruleId":"230","severity":1,"message":"250","line":8,"column":8,"nodeType":"232","messageId":"233","endLine":8,"endColumn":12},{"ruleId":"226","severity":1,"message":"227","line":12,"column":5,"nodeType":"228","messageId":"229","endLine":15,"endColumn":6},{"ruleId":"230","severity":1,"message":"250","line":8,"column":8,"nodeType":"232","messageId":"233","endLine":8,"endColumn":12},{"ruleId":"226","severity":1,"message":"227","line":12,"column":5,"nodeType":"228","messageId":"229","endLine":14,"endColumn":6},{"ruleId":"226","severity":1,"message":"227","line":10,"column":5,"nodeType":"228","messageId":"229","endLine":12,"endColumn":6},{"ruleId":"226","severity":1,"message":"227","line":10,"column":5,"nodeType":"228","messageId":"229","endLine":12,"endColumn":6},{"ruleId":"230","severity":1,"message":"251","line":4,"column":38,"nodeType":"232","messageId":"233","endLine":4,"endColumn":48},{"ruleId":"230","severity":1,"message":"252","line":42,"column":15,"nodeType":"232","messageId":"233","endLine":42,"endColumn":19},{"ruleId":"253","severity":1,"message":"254","line":29,"column":24,"nodeType":"255","messageId":"256","endLine":29,"endColumn":26},{"ruleId":"240","severity":1,"message":"241","line":44,"column":1,"nodeType":"242","endLine":44,"endColumn":28},"no-native-reassign",["257"],"no-negated-in-lhs",["258"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-unused-vars","'FormControl' is defined but never used.","Identifier","unusedVar","'MenuItem' is defined but never used.","'Select' is defined but never used.","'InputLabel' is defined but never used.","'makeStyles' is defined but never used.","'Button' is defined but never used.","'FormHelperText' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'data' is defined but never used.","'TextField' is defined but never used.","'Fade' is defined but never used.","'StyleSheet' is defined but never used.","'prof' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]